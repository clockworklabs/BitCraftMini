// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class InventoryComponent : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("entity_id")]
		public ulong EntityId;
		[Newtonsoft.Json.JsonProperty("pockets")]
		public System.Collections.Generic.List<SpacetimeDB.Pocket> Pockets;

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("entity_id", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64)),
				new SpacetimeDB.SATS.ProductTypeElement("pockets", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.Pocket.GetAlgebraicType())),
			});
		}

		public static explicit operator InventoryComponent(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new InventoryComponent
			{
				EntityId = productValue.elements[0].AsU64(),
				Pockets = ((System.Func<System.Collections.Generic.List<SpacetimeDB.Pocket>>)(() => {
			var vec0 = new System.Collections.Generic.List<SpacetimeDB.Pocket>();
			var vec0_source = productValue.elements[1].AsArray();
			foreach(var entry in vec0_source!)
			{
				vec0.Add((SpacetimeDB.Pocket)(entry));
			}
			return vec0;
		}))(),
			};
		}

		public static System.Collections.Generic.IEnumerable<InventoryComponent> Iter()
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("InventoryComponent"))
			{
				yield return (InventoryComponent)entry;
			}
		}
		public static int Count()
		{
			return NetworkManager.clientDB.Count("InventoryComponent");
		}
		public static InventoryComponent FilterByEntityId(ulong value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("InventoryComponent"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (ulong)productValue.elements[0].AsU64();
				if (compareValue == value) {
					return (InventoryComponent)entry;
				}
			}
			return null;
		}

		public static event Action<InventoryComponent> OnInsert;
		public static event Action<InventoryComponent, InventoryComponent> OnUpdate;
		public static event Action<InventoryComponent> OnDelete;
		public static event Action<NetworkManager.TableOp, InventoryComponent, InventoryComponent> OnRowUpdate;

		public static void OnInsertEvent(object newValue)
		{
			OnInsert?.Invoke((InventoryComponent)newValue);
		}

		public static void OnUpdateEvent(object oldValue, object newValue)
		{
			OnUpdate?.Invoke((InventoryComponent)oldValue,(InventoryComponent)newValue);
		}

		public static void OnDeleteEvent(object oldValue)
		{
			OnDelete?.Invoke((InventoryComponent)oldValue);
		}

		public static void OnRowUpdateEvent(NetworkManager.TableOp op, object oldValue, object newValue)
		{
			OnRowUpdate?.Invoke(op, (InventoryComponent)oldValue,(InventoryComponent)newValue);
		}
	}
}
