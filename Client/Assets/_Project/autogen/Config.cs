// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class Config : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("version")]
		public uint Version;
		[Newtonsoft.Json.JsonProperty("max_player_inventory_slots")]
		public uint MaxPlayerInventorySlots;
		[Newtonsoft.Json.JsonProperty("trading_slots")]
		public uint TradingSlots;
		[Newtonsoft.Json.JsonProperty("chunk_terrain_resolution")]
		public uint ChunkTerrainResolution;
		[Newtonsoft.Json.JsonProperty("chunk_splat_resolution")]
		public uint ChunkSplatResolution;
		[Newtonsoft.Json.JsonProperty("chunk_size")]
		public double ChunkSize;
		[Newtonsoft.Json.JsonProperty("terrain_seed")]
		public uint TerrainSeed;
		[Newtonsoft.Json.JsonProperty("entity_density")]
		public uint EntityDensity;
		[Newtonsoft.Json.JsonProperty("min_spawn_range")]
		public float MinSpawnRange;
		[Newtonsoft.Json.JsonProperty("max_spawn_range")]
		public float MaxSpawnRange;
		[Newtonsoft.Json.JsonProperty("npc_detection_range")]
		public float NpcDetectionRange;

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("version", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("max_player_inventory_slots", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("trading_slots", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("chunk_terrain_resolution", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("chunk_splat_resolution", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("chunk_size", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.F64)),
				new SpacetimeDB.SATS.ProductTypeElement("terrain_seed", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("entity_density", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("min_spawn_range", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.F32)),
				new SpacetimeDB.SATS.ProductTypeElement("max_spawn_range", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.F32)),
				new SpacetimeDB.SATS.ProductTypeElement("npc_detection_range", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.F32)),
			});
		}

		public static explicit operator Config(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new Config
			{
				Version = productValue.elements[0].AsU32(),
				MaxPlayerInventorySlots = productValue.elements[1].AsU32(),
				TradingSlots = productValue.elements[2].AsU32(),
				ChunkTerrainResolution = productValue.elements[3].AsU32(),
				ChunkSplatResolution = productValue.elements[4].AsU32(),
				ChunkSize = productValue.elements[5].AsF64(),
				TerrainSeed = productValue.elements[6].AsU32(),
				EntityDensity = productValue.elements[7].AsU32(),
				MinSpawnRange = productValue.elements[8].AsF32(),
				MaxSpawnRange = productValue.elements[9].AsF32(),
				NpcDetectionRange = productValue.elements[10].AsF32(),
			};
		}

		public static System.Collections.Generic.IEnumerable<Config> Iter()
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				yield return (Config)entry;
			}
		}
		public static int Count()
		{
			return NetworkManager.clientDB.Count("Config");
		}
		public static Config FilterByVersion(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[0].AsU32();
				if (compareValue == value) {
					return (Config)entry;
				}
			}
			return null;
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByMaxPlayerInventorySlots(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[1].AsU32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByTradingSlots(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[2].AsU32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByChunkTerrainResolution(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[3].AsU32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByChunkSplatResolution(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[4].AsU32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByChunkSize(double value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (double)productValue.elements[5].AsF64();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByTerrainSeed(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[6].AsU32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByEntityDensity(uint value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (uint)productValue.elements[7].AsU32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByMinSpawnRange(float value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (float)productValue.elements[8].AsF32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByMaxSpawnRange(float value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (float)productValue.elements[9].AsF32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Config> FilterByNpcDetectionRange(float value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("Config"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (float)productValue.elements[10].AsF32();
				if (compareValue == value) {
					yield return (Config)entry;
				}
			}
		}

		public static event Action<Config> OnInsert;
		public static event Action<Config, Config> OnUpdate;
		public static event Action<Config> OnDelete;
		public static event Action<NetworkManager.TableOp, Config, Config> OnRowUpdate;

		public static void OnInsertEvent(object newValue)
		{
			OnInsert?.Invoke((Config)newValue);
		}

		public static void OnUpdateEvent(object oldValue, object newValue)
		{
			OnUpdate?.Invoke((Config)oldValue,(Config)newValue);
		}

		public static void OnDeleteEvent(object oldValue)
		{
			OnDelete?.Invoke((Config)oldValue);
		}

		public static void OnRowUpdateEvent(NetworkManager.TableOp op, object oldValue, object newValue)
		{
			OnRowUpdate?.Invoke(op, (Config)oldValue,(Config)newValue);
		}
	}
}
