// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;

namespace SpacetimeDB
{
	public partial class ChunkData : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("chunk_id")]
		public ulong ChunkId;
		[Newtonsoft.Json.JsonProperty("data")]
		[Newtonsoft.Json.JsonConverter(typeof(SpacetimeDB.ByteArrayConverter))]
		public byte[] Data;
		[Newtonsoft.Json.JsonProperty("grass")]
		public System.Collections.Generic.List<SpacetimeDB.Grass> Grass;
		[Newtonsoft.Json.JsonProperty("trees")]
		public System.Collections.Generic.List<SpacetimeDB.Tree> Trees;
		[Newtonsoft.Json.JsonProperty("deposits")]
		public System.Collections.Generic.List<SpacetimeDB.Deposit> Deposits;

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("chunk_id", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64)),
				new SpacetimeDB.SATS.ProductTypeElement("data", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U8))),
				new SpacetimeDB.SATS.ProductTypeElement("grass", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.Grass.GetAlgebraicType())),
				new SpacetimeDB.SATS.ProductTypeElement("trees", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.Tree.GetAlgebraicType())),
				new SpacetimeDB.SATS.ProductTypeElement("deposits", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.Deposit.GetAlgebraicType())),
			});
		}

		public static explicit operator ChunkData(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new ChunkData
			{
				ChunkId = productValue.elements[0].AsU64(),
				Data = productValue.elements[1].AsBytes(),
				Grass = ((System.Func<System.Collections.Generic.List<SpacetimeDB.Grass>>)(() => {
			var vec0 = new System.Collections.Generic.List<SpacetimeDB.Grass>();
			var vec0_source = productValue.elements[2].AsArray();
			foreach(var entry in vec0_source!)
			{
				vec0.Add((SpacetimeDB.Grass)(entry));
			}
			return vec0;
		}))(),
				Trees = ((System.Func<System.Collections.Generic.List<SpacetimeDB.Tree>>)(() => {
			var vec0 = new System.Collections.Generic.List<SpacetimeDB.Tree>();
			var vec0_source = productValue.elements[3].AsArray();
			foreach(var entry in vec0_source!)
			{
				vec0.Add((SpacetimeDB.Tree)(entry));
			}
			return vec0;
		}))(),
				Deposits = ((System.Func<System.Collections.Generic.List<SpacetimeDB.Deposit>>)(() => {
			var vec0 = new System.Collections.Generic.List<SpacetimeDB.Deposit>();
			var vec0_source = productValue.elements[4].AsArray();
			foreach(var entry in vec0_source!)
			{
				vec0.Add((SpacetimeDB.Deposit)(entry));
			}
			return vec0;
		}))(),
			};
		}

		public static System.Collections.Generic.IEnumerable<ChunkData> Iter()
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("ChunkData"))
			{
				yield return (ChunkData)entry;
			}
		}
		public static int Count()
		{
			return NetworkManager.clientDB.Count("ChunkData");
		}
		public static ChunkData FilterByChunkId(ulong value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("ChunkData"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (ulong)productValue.elements[0].AsU64();
				if (compareValue == value) {
					return (ChunkData)entry;
				}
			}
			return null;
		}

		public static System.Collections.Generic.IEnumerable<ChunkData> FilterByData(byte[] value)
		{
			foreach(var entry in NetworkManager.clientDB.GetEntries("ChunkData"))
			{
				var productValue = entry.AsProductValue();
				var compareValue = (byte[])productValue.elements[1].AsBytes();
				static bool ByteArrayCompare(byte[] a1, byte[] a2)
				{
				    if (a1.Length != a2.Length)
				        return false;

				    for (int i=0; i<a1.Length; i++)
				        if (a1[i]!=a2[i])
				            return false;

				    return true;
				}

				if (ByteArrayCompare(compareValue, value)) {
					yield return (ChunkData)entry;
				}
			}
		}

		public static event Action<ChunkData> OnInsert;
		public static event Action<ChunkData, ChunkData> OnUpdate;
		public static event Action<ChunkData> OnDelete;
		public static event Action<NetworkManager.TableOp, ChunkData, ChunkData> OnRowUpdate;

		public static void OnInsertEvent(object newValue)
		{
			OnInsert?.Invoke((ChunkData)newValue);
		}

		public static void OnUpdateEvent(object oldValue, object newValue)
		{
			OnUpdate?.Invoke((ChunkData)oldValue,(ChunkData)newValue);
		}

		public static void OnDeleteEvent(object oldValue)
		{
			OnDelete?.Invoke((ChunkData)oldValue);
		}

		public static void OnRowUpdateEvent(NetworkManager.TableOp op, object oldValue, object newValue)
		{
			OnRowUpdate?.Invoke(op, (ChunkData)oldValue,(ChunkData)newValue);
		}
	}
}
