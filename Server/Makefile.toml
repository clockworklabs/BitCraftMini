env_scripts = [
'''
#!@duckscript
workspace_root = get_env CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY
set_env WORKSPACE_ROOT ${workspace_root}

fn <scope> get_or_set_default
	val = get_env ${1}
	if ${val}
	else
		val = canonicalize ${2}
		set_env ${1} ${val}
	end
	return ${val}
end
stdb_dir = get_or_set_default SPACETIME_DIR ${workspace_root}/../../SpacetimeDB
# Validate assumptions
if not is_dir ${stdb_dir}
	echo "SpacetimeDB could not be found. It should exist in the same directory as BitCraftMini."
	echo "Set SPACETIME_DIR if it's somewhere else"
	exit 1
end

stdb_bin = canonicalize ${stdb_dir}/target/release
set_env SPACETIME_CLI ${stdb_bin}/spacetime
get_or_set_default CLIENT_AUTOGEN_DIR ${workspace_root}/../Client/Assets/_Project/autogen
get_or_set_default WASM_MODULE ${workspace_root}/target/wasm32-unknown-unknown/release/bitcraft_mini.wasm
'''
]

[config]
skip_core_tasks = true
default_to_workspace = false

[tasks.build-spacetime]
cwd = "${SPACETIME_DIR}"
command = "cargo"
args = ["build", "--release", "-p", "spacetimedb-cli"]

[tasks.wasm-target]
command = "rustup"
args = [ "target", "add", "wasm32-unknown-unknown" ]

[tasks.build]
dependencies = ["wasm-target"]
command = "cargo"
args = [ "build", "--release", "-p", "bitcraft-mini" ]

[tasks.gen-proto]
script_runner = "@duckscript"
script='''
mkdir protobuf
cp ${SPACETIME_DIR}/crates/spacetimedb-core/protobuf/client_api.proto ./protobuf/client_api.proto

# Export the protobuf
cd protobuf
protobuf_files = glob_array *.proto
cd ..
protos = array_join ${protobuf_files} " "
release protobuf_files

exec --fail-on-error protoc --proto_path=./protobuf --csharp_out=${CLIENT_AUTOGEN_DIR} %{protos}

rm -r protobuf
'''

[tasks.gen-bindings]
dependencies = ["build", "build-spacetime"]
command = "${SPACETIME_CLI}"
args = ["gen-bindings", "${WASM_MODULE}", "-o${CLIENT_AUTOGEN_DIR}"]

[tasks.gen-all]
run_task = { name = ["gen-bindings", "gen-proto"], parallel = true }

[tasks.upload-module]
dependencies = ["build", "build-spacetime"]
script_runner = "@duckscript"
script='''
alias spacetime exec --fail-on-error ${SPACETIME_CLI}
# Update the running module
spacetime identity init-default 
spacetime energy set-balance 5000000000000
spacetime init -f -n "bitcraftmini" ${WASM_MODULE}
sleep 3000
spacetime call "bitcraftmini" "initialize" "{}"
'''

[tasks.update-existing-module]
dependencies = ["build", "build-spacetime"]
script_runner = "@duckscript"
script='''
alias spacetime exec --fail-on-error ${SPACETIME_CLI}
# Update the running module
spacetime identity init-default 
spacetime init -f -n "bitcraftmini" ${WASM_MODULE}
sleep 3000
spacetime call -n "bitcraftmini" "update" "{}"
'''

[tasks.expand]
command = "cargo"
args = ["expand", "-p", "bitcraft-mini"]

[tasks.init-module]
dependencies = ["gen-bindings", "upload-module"]

[tasks.fast-init-module]
dependencies = ["upload-module"]

[tasks.update-module]
dependencies = ["update-existing-module"]

[tasks.help]
script_runner = "@duckscript"
script='''
echo "\n\nCommands: "
echo "\tinit-module: Fully rebuilds the bitcraft mini project and initializes a new module."
echo "\tfast-init-module: Only builds changed files and does not export any new C# files."
echo "\tupdate-module: Fully rebuilds the bitcraft mini project and updates the existing module."
echo "\texpand: Used for debugging spacetimedb_bindgen macros (outputs raw macro)"
echo "\n"
'''

[tasks.default]
alias = "help"

