// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

namespace SpacetimeDB
{
	public partial class Player
	{
		[Newtonsoft.Json.JsonProperty("owner_id")]
		public SpacetimeDB.Hash ownerId;
		[Newtonsoft.Json.JsonProperty("player_id")]
		public uint playerId;
		[Newtonsoft.Json.JsonProperty("creation_time")]
		public ulong creationTime;
		[Newtonsoft.Json.JsonProperty("position")]
		public Position position;
		[Newtonsoft.Json.JsonProperty("rotation")]
		public Rotation rotation;
		[Newtonsoft.Json.JsonProperty("moving")]
		public bool moving;
		public static TypeDef GetTypeDef()
		{
			return TypeDef.Tuple(new ElementDef[]
			{
				new SpacetimeDB.ElementDef(0, SpacetimeDB.Hash.GetTypeDef()),
				new SpacetimeDB.ElementDef(1, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.U32)),
				new SpacetimeDB.ElementDef(2, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.U64)),
				new SpacetimeDB.ElementDef(3, SpacetimeDB.Position.GetTypeDef()),
				new SpacetimeDB.ElementDef(4, SpacetimeDB.Rotation.GetTypeDef()),
				new SpacetimeDB.ElementDef(5, SpacetimeDB.TypeDef.BuiltInType(SpacetimeDB.TypeDef.Def.Bool)),
			});
		}
		public static Player From(TypeValue value)
		{
			var tupleValue = value.GetValue(TypeDef.Def.Tuple) as TypeValue[];
			if (tupleValue == null)
			{
				throw new System.InvalidOperationException("Invalid value (must be Tuple): {value.GetType()}");
			}
			return new Player
			{
				ownerId = SpacetimeDB.Hash.From(tupleValue[0].GetValue(TypeDef.Def.Bytes) as byte[]),
				playerId = (uint)tupleValue[1].GetValue(TypeDef.Def.U32),
				creationTime = (ulong)tupleValue[2].GetValue(TypeDef.Def.U64),
				position = Position.From(tupleValue[3]),
				rotation = Rotation.From(tupleValue[4]),
				moving = (bool)tupleValue[5].GetValue(TypeDef.Def.Bool),
			};
		}
		public static System.Collections.Generic.IEnumerable<Player> FilterByOwnerId(Hash value)
		{
			var typeDef = GetTypeDef();
			foreach(var entry in StdbNetworkManager.clientDB.GetEntries(1))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null)
				{
					continue;
				}
				var compareValue = SpacetimeDB.Hash.From(tupleArr[0].GetValue(TypeDef.Def.Bytes) as byte[]);
				if (compareValue.Equals(value))
				{
					var tuple = TypeValue.GetTuple(typeDef, tupleArr);
					yield return From(tuple);
				}
			}
		}
		public static Player FilterByPlayerId(uint value)
		{
			var typeDef = GetTypeDef();
			foreach(var entry in StdbNetworkManager.clientDB.GetEntries(1))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null)
				{
					continue;
				}
				var compareValue = (uint)tupleArr[1].GetValue(TypeDef.Def.U32);
				if (compareValue == value)
				{
					var tuple = TypeValue.GetTuple(typeDef, tupleArr);
					return From(tuple);
				}
			}
			return null;
		}
		public static System.Collections.Generic.IEnumerable<Player> FilterByCreationTime(ulong value)
		{
			var typeDef = GetTypeDef();
			foreach(var entry in StdbNetworkManager.clientDB.GetEntries(1))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null)
				{
					continue;
				}
				var compareValue = (ulong)tupleArr[2].GetValue(TypeDef.Def.U64);
				if (compareValue == value)
				{
					var tuple = TypeValue.GetTuple(typeDef, tupleArr);
					yield return From(tuple);
				}
			}
		}
		public static System.Collections.Generic.IEnumerable<Player> FilterByPosition(Position value)
		{
			var typeDef = GetTypeDef();
			foreach(var entry in StdbNetworkManager.clientDB.GetEntries(1))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null)
				{
					continue;
				}
				var compareValue = Position.From(tupleArr[3]);
				if (compareValue.Equals(value))
				{
					var tuple = TypeValue.GetTuple(typeDef, tupleArr);
					yield return From(tuple);
				}
			}
		}
		public static System.Collections.Generic.IEnumerable<Player> FilterByRotation(Rotation value)
		{
			var typeDef = GetTypeDef();
			foreach(var entry in StdbNetworkManager.clientDB.GetEntries(1))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null)
				{
					continue;
				}
				var compareValue = Rotation.From(tupleArr[4]);
				if (compareValue.Equals(value))
				{
					var tuple = TypeValue.GetTuple(typeDef, tupleArr);
					yield return From(tuple);
				}
			}
		}
		public static System.Collections.Generic.IEnumerable<Player> FilterByMoving(bool value)
		{
			var typeDef = GetTypeDef();
			foreach(var entry in StdbNetworkManager.clientDB.GetEntries(1))
			{
				var tupleArr = entry.GetValue(TypeDef.Def.Tuple) as TypeValue[];
				if (tupleArr == null)
				{
					continue;
				}
				var compareValue = (bool)tupleArr[5].GetValue(TypeDef.Def.Bool);
				if (compareValue == value)
				{
					var tuple = TypeValue.GetTuple(typeDef, tupleArr);
					yield return From(tuple);
				}
			}
		}
	}
}
